---
title: "Analysis of GBS data"
output: html_document
---
Code is partially adapted from tutorials within https://grunwaldlab.github.io/Population_Genetics_in_R/index.html. Cited publications within the tutorial were also referenced, in addition to publicly available scripts on the Grunwald Lab Github page. A csv file is also needed with metadataa on each isolate, including sample names, location, latitude and longitude, and any other metadata that is of interest in the analysis. 

```{r, eval=TRUE, include=FALSE}
knitr::opts_knit$set(root.dir = '~/gbstlm/output')
library(devtools)
library(vcfR)
library(poppr)
library(ape)
library(ggplot2)
library(RColorBrewer)
library(adegenet)
library(hierfstat)
library(maps)
library(mapdata)
```

Preparation-conversion to genlight object
```{r, eval=TRUE, include=TRUE}
# Extracting the genotypes
clean=read.vcfR("~/gbstlm/output/filteredpfulvanodup.vcf.gz")
pass.gt <- extract.gt(clean)
gbs.pass <- vcfR2genlight(clean[is.polymorphic(clean, na.omit = T)])
gbs.pass
ploidy(gbs.pass) <- 1
```

```{r, eval=TRUE, include=TRUE}
# Extracting the genotypes for clone corrected dataset
cleancc=read.vcfR("~/gbstlm/output/cleanclonepfulva.out.vcf.gz")
passcc.gt <- extract.gt(cleancc)
gbscc.pass <- vcfR2genlight(cleancc[is.polymorphic(cleancc, na.omit = T)])
gbscc.pass
ploidy(gbscc.pass) <- 1
```

```{r, eval=TRUE, include=TRUE}
#load sample info
data <- read.csv("~/gbstlm/output/info2.csv")
data <- data[match(indNames(gbs.pass), data$AccessID), ]
pop(gbs.pass) <- data$State

#load sample info for clone-corrected dataset
datacc <- read.csv("~/gbstlm/output/info2.csv")
datacc <- datacc[match(indNames(gbscc.pass), datacc$AccessID), ]
pop(gbscc.pass) <- datacc$State

#Genind object for downstream Fst analysis
gbscc2.pass <- vcfR2genind(cleancc)
ploidy(gbscc2.pass) <- 1
datacc2 <- datacc[match(indNames(gbscc2.pass), datacc$AccessID), ]
pop(gbscc2.pass) <- datacc2$State
```

Neighbor Joining Tree
```{r, eval=TRUE, include=TRUE}
#nj tree
tiff("nj10009.tiff", units="in", width=10, height=6, res = 600)
set.seed(9)
tree <- aboot(gbs.pass, tree = "nj", distance = bitwise.dist, sample = 1000, showtree = T, cutoff = 50, quiet = T, root=FALSE)
cols <- brewer.pal(n = nPop(gbs.pass), name = "Dark2")
plot.phylo(tree, cex = 0.62, font = 2, adj = 0.5, tip.color =cols[pop(gbs.pass)])
nodelabels(tree$node.label, adj = c(1.5, -0.5), frame = "n", cex = 0.4,font = 2, xpd = TRUE)
legend('bottomright',legend = c("MA","MN","NH","NY", "VT"), fill = cols, border = FALSE, bty = "n", cex = 1)
#title(xlab = "Genetic distance (proportion of loci that are different)")
dev.off()
```

Neighbor joining tree-circular
```{r, eval=TRUE, include=TRUE,fig.height=4}
library(ape)
tiff("njprevcirc44.tiff", units="in", width=8, height=8, res = 600)
tre <- nj(prevosti.dist(as.matrix(gbs.pass)))
tre
plot(tre, typ="fan", cex=1, tip.color =cols[pop(gbs.pass)])
legend('topright',legend = c("MA","MN","NH","NY", "VT"), fill = cols, border = FALSE, bty = "n", cex = 1)
dev.off()
```

Principal Component Analysis with clone-corrected dataset
```{r, eval=TRUE, include=TRUE}
#pop(gi.pass)<-data.set$Region
pass.pca <- glPca(gbscc.pass, nf = 100)
cols2 <- brewer.pal(n = nPop(gbscc.pass), name = "Dark2")
# calculate percent variance explained by first two eigenvalues
pc1_eig <- round(pass.pca$eig[1]/sum(pass.pca$eig), digits = 3)
pc2_eig <- round(pass.pca$eig[2]/sum(pass.pca$eig), digits = 3)
pc3_eig <- round(pass.pca$eig[3]/sum(pass.pca$eig), digits = 3)
pc4_eig <- round(pass.pca$eig[4]/sum(pass.pca$eig), digits = 3)
pc5_eig <- round(pass.pca$eig[5]/sum(pass.pca$eig), digits = 3)
pc6_eig <- round(pass.pca$eig[6]/sum(pass.pca$eig), digits = 3)
pc7_eig <- round(pass.pca$eig[7]/sum(pass.pca$eig), digits = 3)
pc8_eig <- round(pass.pca$eig[8]/sum(pass.pca$eig), digits = 3)
pc9_eig <- round(pass.pca$eig[9]/sum(pass.pca$eig), digits = 3)
pc10_eig <- round(pass.pca$eig[10]/sum(pass.pca$eig), digits = 3)
barplot(100*pass.pca$eig/sum(pass.pca$eig), col = heat.colors(50), main="PCA Eigenvalues")
title(ylab="Percent of variance\nexplained", line = 2)
title(xlab="Eigenvalues", line = 1)
pass.pca.scores <- as.data.frame(pass.pca$scores)
pass.pca.scores$pop <- pop(gbscc.pass)
pass.pca.scores$count<-datacc$Count
var_frac <- pass.pca$eig/sum(pass.pca$eig)
signif(sum(var_frac[1:3]) * 100, 3)

tiff("pca_1and29", units="in", width=5, height=4.5, res=600)
set.seed(9)
p <- ggplot(pass.pca.scores, aes(x=PC1, y=PC2, colour=pop)) +
    xlab("PC1 (22%)") + ylab("PC2 (15%)")
p <- p + geom_point()
p <- p + geom_point(size=pass.pca.scores$count/1.2)
p <- p + scale_color_manual(values = cols2) 
p <- p + geom_hline(yintercept = 0) 
p <- p + geom_vline(xintercept = 0) 
p <- p + theme_bw()
p
dev.off()

tiff("pca_1and3", units="in", width=5, height=4.5, res=600)
set.seed(9)
p <- ggplot(pass.pca.scores, aes(x=PC1, y=PC3, colour=pop)) 
p <- p + geom_point(size=pass.pca.scores$count)
p <- p + scale_color_manual(values = cols2) 
p <- p + geom_hline(yintercept = 0) 
p <- p + geom_vline(xintercept = 0) 
p <- p + theme_bw()
p
dev.off()

tiff("pca_2and3", units="in", width=5, height=4.5, res=600)
set.seed(9)
p <- ggplot(pass.pca.scores, aes(x=PC2, y=PC3, colour=pop)) 
p <- p + geom_point(size=pass.pca.scores$count)
p <- p + scale_color_manual(values = cols2) 
p <- p + geom_hline(yintercept = 0) 
p <- p + geom_vline(xintercept = 0) 
p <- p + theme_bw()
p
dev.off()
```

Nei Gst, Hedrick G'st with clone corrected dataset
```{r, eval=TRUE, include=TRUE}
gen.diff <- pairwise_genetic_diff(cleancc, pop(gbscc.pass), method='nei')
colMeans(gen.diff[c(3:17)], na.rm = T)
```

Weir and Cockerman's estimator of Fst (1984)
```{r, eval=TRUE, include=TRUE}
#1987
passgen=genind2hierfstat(gbscc2.pass,pop=pop(gbscc2.pass))
pairwise.neifst(passgen,diploid=FALSE)
#1984
pairwise.WCfst(passgen, diploid=FALSE)
```

Chi-Square Goodness of Fit test
```{r, eval=TRUE, include=TRUE, fig.height=6}
mat <- c(15,35)
result <- chisq.test(mat, p = c(1/2, 1/2))
result
```

Mapping isolates
```{r, eval=TRUE, include=TRUE, fig.height=6}
tiff("map_mas1.tiff", units="in", width=5, height=5, res=600)
map('state', region= c('new york', 'vermont', 'ohio', 'indiana', 'wisconsin', 'michigan', 'massachusetts', 'new hampshire', 'minnesota', 'iowa', 'illinois', 'penn'),add=FALSE, col='gray90', fill=T) 
  points(data$long,data$lat, pch=16, col=data$color,
  cex=data$count2/2) 
dev.off()
```
